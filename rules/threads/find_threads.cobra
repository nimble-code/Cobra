
requires 5.0

pe S0: pthread \. h
pe S1: [pthread_create pthread_join] ( .* )
	pe S2: omp \. h
	pe S3: tbb / task_scheduler \. h
	pe S4: tbb / task_group \. h
	pe S5: boost / thread \. hpp
pe S6: ^[-> \.] wait ( .* )		### XXX prefix with ^[-> \.]
pe S7: ^[-> \.] fork ( .* )		### XXX prefix with ^[-> \.]
pe S8: [execlp execl execle execv execvp execvpe] ( .* )
pe S9: sys / mman \. h
pe S10: [mmap munmap] ( .* )
pe S11: [/_lock$ /_unlock$] ( .* )
ps list
# dp *

# linux 6.1.7 - 32,040 files 107,704,514 tokens
#  S0,  149 patterns
#  S1,  537 patterns
#  S6,   72 patterns
#  S7,  263 patterns
#  S8,   45 patterns
#  S9,  208 patterns
#  S10, 648 patterns
#  S11, 104843 patterns

# Q1: how many different files for each pattern set
# Q2: what is the overlap in filenames of the sets
# =================================================
# as generated by the script below:
#      9 - - - - - - - - 8 9 10 11
#     19 - 1 - - - - 6 7 8 9 10 11
#     29 - - - - - - - - - - 10 11
#     41 - - - - - - 6 7 8 9 10 11
#    120 - - - - - - - 7 8 9 10 11
#    139 - - - - - - - - - 9 10 11
#    149 0 1 - - - - 6 7 8 9 10 11
#  13758 - - - - - - - - - - -- 11
#
# all matches are in set S10 and S11, and most also in S7, S8, and S9 (329 of 506 or 65%)
# although there is a large number of matches in S11 (lock/unlock) outside these sets as well
# they appear in 14,264 of the 32,040 files: 44.5% of all c-files
# 13,758 of these 14,264 files (96.5%) have *only* matches in S11
# not in S7: 177 of 506
# not in S8: 168 of 506
# within S6-S10 about half use pthread_create (168) and half (161) don't
# computed with (file Sorted): awk ' { $NF=""; print $0; }' < Sorted | uniq -c | sort -n
. year7/find_threads2.cobra

. year7/modules_list.cobra
## creates array Modules[basename]
%{
	global Modules[];
	# first assign numbers to modules
	# (replacing the file counts)
	seqno = 1;
	for (i in Modules)
	{	Modules[i.txt] = seqno;
		seqno++;
	}
# print seqno " modules found\n";
	Stop;
%}

%{
	function getbasename(f)
	{	q = strrstr(f, "/");  # index of last /
		if (q > 0)
		{	b = substr(f, 0, q-1);	# basename
		} else
		{	b = "";
		}
		return b;
	}
	function walk(NM)
	{	global Elements[];
		global Modules[];
		unset Elements;
		n = pset(NM);
# print "pset " NM " n=" n.seq "\n";
		if (n.seq == 0)
		{	return;
		}
		while (n.seq != 0)
		{	x = n.p_start;
			bnm = getbasename(x.fnm);
			nr = Modules[bnm];		# module nr
			Elements[nr] = Elements[nr] + 1;
			Basename[nr] = bnm;
			n = n.nxt;
		}
		# a test to see which module(s) the matches are in
		for (i in Elements)
		{	print Elements[i.txt] "\t(" Basename[i.txt] ")\n";
		}
	}
	walk("S7");
	# linux 6.1.7 - 32,040 files 107,704,514 tokens
	# 2,869 modules
	# largest numbers of files with S7 (fork) matches per module
	# ignoring modules with testing or samples in the name:

	# $ sort -n oooo | grep -v -e samples/ -e testing/ -e /tests -e :
	# 1       (./arch/um/os-Linux)
	# 1       (./tools/accounting)
	# 1       (./tools/lib/subcmd)
	# 1       (./tools/perf/util)
	# 1       (./tools/power/cpupower/utils/idle_monitor)
	# 1       (./tools/power/x86/intel-speed-select)
	# 1       (./tools/power/x86/turbostat)
	# 1       (./tools/thermal/thermometer)
	# 1       (./tools/thermal/tmon)
	# 1       (./tools/usb/usbip/src)
	# 1       (./tools/virtio)
	# 3       (./tools/perf)
	# 4       (./tools/perf/bench)

	Stop;
%}

# Q3: check access to global data objects in the last two modules
# cd /cygdrive/d/Dropbox_orig/Linux/linux-6.1.7/linux/tools/perf
# pe  X: ^extern @type x:@ident <1> ^( @1 (.curly == 0 && .round == 0)
# 1. which functions use those objects?
# 2. can they be part of different threads?
# 3. is access protected by locks? (S11)

# only 5 of 32 files in tools/perf contain the word mutex, and only 8 or 10 files in perf/bench/

# check consistency of locks, rather than presence/absence
# for every assignment to a global data object, mark which locks are in effect
#	1. use 'symbols' command to find global data objects - .bound fields point to a zero-curly
#	2. track which locks are in effect, and remember -- finding inconsistencies
#	3. related: check when lock set/release aren't paired in a function
#	   cannot track in those files, but can issue warnings

