.ds C Cobra
.\" nroff -man cobra.1
.\" place in (depending on your system):
.\"    /usr/local/man/man1
.\" or /usr/man/man1
.\" or /usr/share/man/man1
.TH COBRA 1
.SH NAME
cobra \- interactive code browser and analyzer
.SH SYNOPSIS
.br
.B cobra
.BI [ options ]
.BI [ files ]
.SH DESCRIPTION
\*C supports the examination and exploration of sets
of source files that are preprocessed into lexical tokens.
The tool supports queries expressed interactively; it can
perform pattern matches using standard or simplifed forms of
regular expressions, and it can handle detailed queries
specified with inline programs written in a scripting language.
.br
By default the tool recognizes C keywords and typenames.
With command-line
options it can also recognize C++, Java, Ada or Python code.
The tool can be retargeted for additional languages, or
other types of input not related to programming, by defining
maps of the types of tokens that must be recognized.
The query command-, pattern matching, and scripting languages
are documented in online reference manuals.
.\" .br
.\" [starting with version 4.9 this is only enabled when the
.\" sources are compiled with -DAUTORUN ]
.\" If a file named ".cobra_run" is found in the directory where
.\" \*C starts, it is assumed to be a command-file that will be
.\" executed immediately after all source-files have been read,
.\" after which Cobra stops.
.\" (Note: In versions of Cobra earlier than 4.9 this file was
.\" named ".cobra" instead, which could cause a conflict with the
.\" configuration file "~/.cobra" which is created during tool
.\" installation.)
.br
Syntax errors will result if the file does not contain valid
commands.
.SH OPTIONS

.TP
.B \-Ada
Recognize Ada keywords.

.TP
.B \-allheaderfiles
Process all headerfiles, including system header files
starting with prefix \f3/usr/\f1. Assumes that \f3\-cpp\f1 is used.
See also \f3\-noheaderfiles\f1.

.TP
.B \-C++
Recognize C++ keywords.

.TP
.BI "\-c \f2'query commands'\f1"
Execute the \f2query commands\f1, and then stop.
Individual query commands are separated by semi-colons.
For example:
.br
.in +5
$ cobra \-c \f2'm /regex; p' *.c\f1
.in -5
.br
can be used to find tokens matching a regular expression.
.br
Implies \f3\-quiet\f1.
See also \f3\-e\f1 and \f3-pe\f1..

.TP
.B \-comments
Include comments as tokens (disabled by default), unless \f2-cpp\f1 is used.

.TP
.B \-configure dir
Set and remember the location of the cobra rules directory.
(Stored in a file named \f2.cobra\f1 in the users home directory.)

.TP
.B \-cpp
Run the C preprocessor over the input files before scanning them.
This can later be undone with the inline command \f2cpp off\f1.
If preprocessing was not enabled at startup (the default), it can
also be enabled interactively with command \f2cpp on\f1, which then
triggers a rescan of all source files. Optionally specify the
C preprocessor to be used, eg. as in \-cpp=clang

.TP
.B \-d
Reserved for debugging support.
Different behavior when preceded with \f3\-v\f1.
Implies \f3\-preserve\f1.

.TP
.B \-Dstr
Pass directive to the C preprocessor.
See also \f3\-cpp\f1, \f3\-U\f1 and \f3\-I\f1.

.TP
.B \-echo
Echo script command names when called during the session (eg from query libraries).

.TP
.B \-eof
Omit the EOF tokens that are by default placed at the end of each input file.

.TP
.B \-eol
Add EOL tokens at the end of each input line.

.TP
.BI "\-e \f2'token_expression'\f1
(Alternatively: \f3-expr\f1) Report patterns in the code matching a token expression.
Meta-symbols that can be used in token expressions, with the usual meaning, are:
( | ) . * + ?.
.br
Sets of tokens can also be written as ranges enclosed in square brackets, e.g.:
\f2[ appel pear ]\f1, to indicate a required match of any token in the range
at the corresponding place in the expression.
A token-name and a range of token-names (but not sub-expressions) can be negated
with a ^ symbol, e.g.:
\f2^appel\f1 (to indicate a required match any token except the one negated) or
\f2^[appel pear]\f1 (to match any token not named in the range).
.br
Tokens can be bound to a variable name with a name-binding operation \f2name:pattern\f1,
e.g. \f2name:@ident\f1,
and later referenced with a name-reference \f2:name\f1.
.br
When preceded by option \f3\-view\f1, a graph of the non-deterministic
finite state automaton that is generated from the token expression is displayed with
\f2dot\f1 or \f2dotty\f1 (which are assumed to be available).
.br
Implies \f3\-quiet\f1.
.br
See also \f3-pe\f1, for a simplified version of this option that is often more convenient
for specifying source code patterns.

.TP
.BI "-f \f2file\f1"
Execute the commands stored in the named \f2file\f1, and then stop.
.br
Implies \f3\-quiet\f1.

.TP
.BI "-F \f2file_list\f1"
Read files to process from a file named \f2file_list\f1 instead of
from command arguments.
.br
So the following three alternatives have the same effect
(assuming for this example that there are no additional .[ch] files in subdirectories):
.br
.in +5
$ cobra *.[ch]
.br
$ find . -type f -name '*.ch' > files;  cobra `cat files`
.br
$ cobra -F files
.br
$ cobra -recursive '*.[ch]'
.in -5
.br
See also -recursive.
.br
Optionally, starting with Cobra version 3.10, the filenames in the
\f2file_list\f1 textfile can be preceded with compiler directives
that should be used when the file is preprocessed (see \fBx_make\f1).
The compiler directives must be -I, -D, or -U directives only.
Lines in the \f2file_list\f1 textfile that start with a pound sign (#)
are treated as comments and skipped.

.TP
.B \-global
Allow pattern matches (pe) to cross file boundaries.

.TP
.B \-help
(or any other unrecognized option like \f3\-?\f1 or \f3\-\-\f1)
print a summary of command line arguments.

.TP
.B \-html
Recognize html tags and perform basic checks on matching tags.

.TP
.B \-Idir
Passed as a directive to the C preprocessor, if used.
See also \f3\-cpp\f1, \f3\-D\f1 and \f3\-U\f1.

.TP
.B \-Java
Recognize Java keywords.

.TP
.B \-json
Generate json output for -pe pattern matches (only).
(Can also be used inline as an interactive query command \f2json\f1.)

.TP
.B \-json+
Generate more detailed json output for -pe pattern matches (only).
The extra fields give variable name bindings, if any, and the first line
of the source code pattern that is matched.

.TP
.B \-lib
List all prefefined \*C query sets that can be invoked by name
with the \f3\-f\f1 option, without or without the filename suffix \f2.cobra\f1.
This option can be abbreviated to \f3\-l\f1.

.TP
.B \-MaxMem N
Set the maximum amount of memory to be used to N MB (default value: 24000)

.TP
.B \-macros
Parse the text of preprocessing macros,
classifying each complete macro definition
as a single lexical token of type \f2cpp\f1.
The use of this option implies that no C preprocessing is used
(the default), cf. \f3\-cpp\f1, \f3\-nocpp\f1.
.br
As an example, this is how the tokenization changes when the \f2-macros\f1 option is used,
using a short inline program to print each token with some of its attributes:
.br
.in +5
$ cat /tmp/macro
.br
#define A(x)    foo(x) \\
.br
                goo()
.br
$ cobra -c '%{ print .lnr " " .seq " " .typ " " .txt "\\n"; %}' /tmp/macro
.br
1 0 cpp #define
.br
1 1 ident A
.br
1 2  (
.br
1 3 ident x
.br
1 4  )
.br
1 5 ident foo
.br
1 6  (
.br
1 7 ident x
.br
1 8  )
.br
2 9 ident goo
.br
2 10  (
.br
2 11  )
.br
3 12 cpp EOL
.br
$ cobra -macros -c '%{ print .lnr " " .seq " " .typ " " .txt "\\n"; %}' /tmp/macro
.br
3 0 cpp # define A(x)   foo(x)          goo()
.in -5
.br
That is, with the \f2-macros\f1 option the complete macro definition is parsed as a single token
of type \f2cpp\f1, and there is no separate \f2EOL\f1 token.
.br
Can be abbreviated to \f3\-m\f1.

.TP
.B \-nocpp
Do not invoke the C preprocessor (the default),
and prevent preprocessing from being enabled interactively,
with <tt>cpp on</tt> commands (e.g., in scripts).
See also \f3\-cpp\f1.
.br
Can be abbreviated to \f3\-n\f1.

.TP
.B \-noqualifiers
Do not tag C qualifiers separately (e.g., const, volatile).

.TP
.B \-noheaderfiles
Do not process any files with names ending in \f3.h\f1.
See also \f3\-allheaderfiles\f1.

.TP
.B \-nostream
Do not enabled the default input streaming when reading from stdin.
See also \f3\-stream\f1 and \f3\-stream_margin\f1.

.TP
.B \-notypedefs
Do not process C typedef definitions. By default the typedefs are
parsed and the resulting user-defined types are categorized as \f2@type\f1.

.TP
.B \-notypes
Do not tag any predefined C type names (e.g., int, short, char)

.TP
.B \-Nn
Use \f2n\f1 parallel threads to process queries.
.\" On Linux systems with at least four cores, the default setting
.\" that is used will be \f3\-N4\f1, unless an explicit \f2Nn\f1 argument is used.

.TP
.BI "\-pattern \f2'token-pattern'\f1
(Alternatively \f3-pat\f1 or \f3-pe\f1) Behaves like \f3-expr\f1 but with a
spimlified format that requires fewer escape symbols.
In a token pattern the characters '(', '|', ')', '+', and '?' are
interpreted as regular characters and not as meta-symbols.
The meta-ness of these symbols can now be restored by preceding them with
a backslash (i.e., the opposite semantics from the standard token expression).
.br
The characters '*' and ']' are interpreted as
regular characters only if they are \f3preceded\f1 by a space,
and the character '[' is only interpreted as a regular
character if it is \f3followed\f1 by a space.
.br
The complete set of escape rules for pattern expressions is as follows:
.br
	':' is ':' iff preceded and followed by space, else it provides name binding
.br
	'[' is '[' iff followed by a space, else it begins a range expression
.br
	']' is ']' iff preceded by a space, else it closes a range expression
.br
	'*' is '*' iff preceded by a space, else it is the Kleene star
.br
	'.' is '.' iff preceded by '\\', else it matches any character
.br
	'^' is '^' iff preceded by '\\', else it indicates negation.
.br
Can be abbreviated to \f2-pe\f1.

.TP
.B \-preserve
Preserve the temporary files created in \f2/tmp\f1.
Normally these files are removed when the tool quits, but
it is possible that when the tool dies for other reasons 
(e.g., when the \f2-view\f1 option is used) that
some of the temporary files linger. It may be wise to check
the contents of \f2/tmp\f1 from time to time and remove
accumulated files named \f2/tmp/cobra_*\f1 and \f2/tmp/_f_*\f1.

.TP
.B \-prune
After reading in files, remove code between #if 0 and #endif directives

.TP
.B \-Python
or
.B \-python
Recognize Python keywords, and (v4.7) handle block statements and ranges
(recognizing indentation semantics).

.TP
.B \-quiet
Quiet mode.
Produces no intermediate output on matches and run-times.

.TP
.B \-recursive "pattern"
Recursively collect files with names matching 'pattern,' to process.
This uses the \f2find\f1 tool to perform the collection, which is
assumed installed.
.br
For an example, see under option \f2-F\f1.

.TP
.B \-regex "expr"
Same as \f3\-e\f1.

.TP
.B \-runtimes
Report the runtime of all commands executed, if it exceeds one second.

.TP
.B \-solo
Rub a cobra inline program without input files.

.TP
.B \-scrub
Produce output in the format expected by the \f2scrub\f1 tool.

.TP
.B \-seed file
Read JSON formatted output from file to seed initial pattern sets.

.TP
.B \-showprog
Generate a dot graph (graphviz) visualization for the first inline program.

.TP
.B \-stream N
Set the stdin stream buffer size to N bytes (default is 100000).
This is only relevant when the input files are read from stdin.
See also \f3\-stream_margin\f1.

.TP
.B \-stream_margin N
Set the stdin windon margin to N tokens (default is 100).
This is the number of tokens before the current token being processed
that is retained in the sliding input window.

.TP
.B \-stream_override
Override warning about non-streamable scripts.

.TP
.B \-terse
Suppress the display of detailed matches, showin only number of matches.
(Most useful in combination with \f3\-f\f1, \f3\-expr\f1, or \f3\-commands\f1.

.TP
.B \-text
Suppress the default categorization of tokens for a source programming
language (the default is C). This increases performance when processing
other types of input, especially in applications of runtime verification.

.TP
.B \-tok
Produce a tokenized version of the source files and then stop.

.TP
.B \-Ustr
Pass directive to the C preprocessor.
See also \f3\-cpp\f1, \f3\-D\f1 and \f3\-I\f1.

.TP
.B \-V
Print current \*C version number and stop. Same as \f3\-version\f1.

.TP
.B \-v
Verbose mode. Multiple uses of \f2-v\f1 increase the verbosity.

.TP
.B \-version
Print the Cobra version number and exit. Same as \f3\-V\f1.

.TP
.B \-view
Must be followed by one of \f3\-e\f1, \f3\-pe\f1, or \f3\-f\f1.
.br
When combined with \f3\-e\f1 or \f3\-pe\f1 (or equivalents),
displays a dot-graph of the NDFA of the token expression.
.br
When combined with \f3\-f file\f1 and the file contains a single inline
program, displays a dot-graph of the DFA of that program.
.br
The \f3\-view\f1 option implies \f3\-preserve\f1.
.br
A useful way to debug pattern matching is to first display the statemachine
that is used, with \f2-view\f1 and then run the pattern matching algorithm
in verbose mode (\f2-v\f1) to see state changes on each new token scanned.

.TP
.BI "\-var name=value"
Set \f2name\f1 to \f2value\f1 in user-defined parameterized scripts.
.PP
Arguments starting with a double hyphen are passed to
the standalone backend processor, if one was defined,
e.g. \f2find_taint --help\f1 or \f2--debug\f1.
If no backend is used (i.e., the Cobra default engine is used
and the command name is \f2cobra\f1),
these arguments are silently ignored.

.SH EXAMPLES
In all example below the initial \f2$\f1 character is the shell
command prompt.
.PP
Print lines containing a match of lexical tokens
named \f2x\f1 (e.g., identifiers) in a set of C source files:
.RS
  $ cobra \-expr x *.[ch]
.RE
or just
.RS
  $ cobra \-e x *.[ch]
.RE
.PP
To print only the tokens matched:
.RS
  $ cobra \-commands "mark x; list" *.[ch]
.RE
or more compactly using shorthands:
.RS
  $ cobra \-c 'm x; l' *.[ch]
.RE
.PP
Display the complete source lines:
.RS
  $ cobra \-c 'm x; d' *.[ch]
.RE
.PP
Display the precise tokens matched:
.RS
  $ cobra \-c 'm x; p' *.[ch]
.RE
.PP
Print identifier names:
.RS
  $ cobra \-c 'm @ident; l' *.[ch]
.RE
.PP
Print tokens matching a regular expression:
.RS
  $ cobra \-c 'm /x; l' *.[ch]
.RE
.PP
Find switch statements without a default clause:
.RS
  $ cobra \-c 'm switch; n {; c top no default; d' *.c
.RE
.PP
Print every token preceded by its sequence number, with an
inline Cobra program fragment:
.RS
  $ cobra \-c '%{ print .seq " " .txt "\\n"; %}' *.c
.RE
Note that we use single quotes around the command, so that
we can use double-quotes inside, in the print statement.
.PP
Find functions that open, but do not close, a file descriptor, using a
token expression:
.RS
  $ cobra \-e '{ FILE \\* x:@ident .* :x = fopen ^fclose* }' *.c
.RE
By default, the nesting
level of closing curly, round, and square braces are matched to the
last preceding opening brace of the same type and level.
.LP
This can be written more compactly with the \f3\-pattern\f1 option:
.RS
  $ cobra \-pattern '{ FILE * x:@ident .* :x = fopen ^fclose* }' *.c
.RE
or equivalently
.RS
  $ cobra \-pe '{ FILE * x:@ident .* :x = fopen ^fclose* }' *.c
.RE
Pattern commands are usable for most simple pattern queries,
and easier to type as well,
so we'll use them for most of the examples.
.PP
Find memory that is allocated but not freed within the same block:
.RS
  $ cobra \-pe '{ .* malloc ^free* }' *.c
.RE
.PP
Find switch statements that do not contain a default clause
with a token expression, though possibly matching defaults in nested statements
(see above for a more precise command sequence using -c):
.RS
  $ cobra \-pe 'switch ( .* ) { ^default* }' *.c
.RE
.PP
Find cases where a loop-control variable is used inside the body of a for-loop
(easy to adapt to suffix with an assignment operator or pre- or post-increment
or decrement operators, to check if the variable is modified as well):
.RS
  $ cobra \-pe 'for ( x:@ident .* ) { .* :x .* }' *.c
.RE
.PP
Find if statements not followed by compound statement:
.RS
  $ cobra \-pe 'if ( .* ) ^{' *.c
.RE
.PP
Be careful with the dot meta-symbol when it is used in combination
with negations in the same expression. In the above expression,
for instance, it is sometimes better to write:
.RS
  $ cobra \-pe 'if ( ^)* ) ^{' *.c
.RE
.PP
Find else keywords that are not followed by compound statement or another if:
.RS
  $ cobra \-pe 'else ^[{ if]' *.c
.RE
.PP
Find empty if statements:
.RS
  $ cobra \-pe 'if ( .* ) ;' *.c
.RE
.PP
Note that in this pattern expression the semi-colon symbol
at the end matches a lexical token. It is not a command separator, as
it would be if the \f3\-c\f1 syntax was used.
.PP
Find empty else clauses:
.RS
  $ cobra \-pe 'else ;' *.c
.RE
.PP
Find expressions with missing braces around (selected) binary operators:
.RS
  $ cobra \-pe '( ^(* [| &] ^(* & .* )' *.c
.RE
.PP
Find the definition of the C function \f2main\f1:
.RS
  $ cobra \-pe 'main ( .* ) { .* }' *.c
.RE
.PP
Find blocks that contain no semi-colons or commas, after standard
preprocessing with macro-substitution, file inclusion, etc:
.RS
  $ cobra \-cpp \-pe '{ ^[, ;]* }' *.c
.RE
.PP
Find calls to sprintf that potentially use the destination argument as a source:
.RS
  $ cobra \-pe 'sprintf ( x:@ident .* :x .* )' *.c
.RE
.PP
Also highlight the matching bound variable references:
.RS
  $ cobra \-v \-pe 'sprintf ( x:@ident .* :x .* )' *.c
.RE
.SH FILES
A directory with predefined query libraries is created in
\f2$COBRA/rules\f1, where \f2$COBRA\f1 is the installation directory.
(If you forgot, on a Unix/Linux system type: \f2'which cobra'\f1 to find it,
and replace the trailing \f2bin/cobra\f1 with \f2rules\f1.)
.PP
Files with extension \f2.cobra\f1 that are located
in subdirectory \f2$COBRA/rules/main\f1 can be invoked directly by
name from the command-line (without the need to specify a complete
pathname). For instance:
.RS
  $ cobra \-terse \-f basic.cobra *.[ch]
.RE
Or interactively as:
.RS
  : . basic
.RE
This command applies a set of checks defined in \f2$COBRA/rules/main/basic.cobra\f1.
With the \f2terse\f1 option only numbers of matches are reported, but not
detailed line-by-line reports.
Without the \f3\-terse\f1 option the full details are displayed.
See also option \f3\-lib\f1.
.PP
The file \f2$HOME/.cobra\f1 is created during tool installation and is read
when the tool is started. It contains the location of the rules directory
and can optionally define a default number of cores to use on each run.
Sample contents of this file are:
.RS
Rules: /tools/cobra/rules
.br
ncore: 1
.RE
There should be no space before the first \f2Rules:\f1 or \f2ncore:\f1 field,
and there should no no other information on a line after the second field.
There may be spaces or tabs between the first and second field.
.PP
Be careful with using a higher value for the default number of cores to be
used: not all predefined library checks are multi-core safe (yet).
.PP
Tool documentation can be found online at \f2http://spinroot.com/cobra\f1..
.br
Temporary files are created in \f2/tmp\f1 with all filenames prefixed
with the string \f2/tmp/cobra_\f1. With option \f2-d\f1 the temporary
files are not automatically removed when \*C exits.
.sp
.SH AUTHOR
Gerard Holzmann, gholzmann@acm.org
.sp
.SH SEE ALSO
\fBcwe\f1, \fBfind_taint\f1, \fBduplicates\f1, \fBjson_convert\f1, \fBx_make\f1.
.sp
Online manual pages and tutorials with more detail,
reference materials, and examples:
.sp
.in +2
http://spinroot.com/cobra
.sp
http://spinroot.com/cobra/manual.html
.sp
http://spinroot.com/cobra/tutorial.html
.sp
.in -2
Background information on an early version of \*C can be found in:
.br
.in +2
.sp
G.J. Holzmann, \f2Cobra - a light-weight tool for static and dynamic program analysis\f1.
.sp
Innovations in Systems and Software Engineering (ISSE), Springer,
DOI 10.1007/s11334-016-0282-x, pp. 1-15, May 2016,
(describes the older \*C version 1.)
.sp
G.J. Holzmann, \f2Cobra - a fast structural code analysis\f1.
Spin 2017 Symposium, Santa Barbara, CA, USA, ACM Publ.
(describes the current \*C version 2.)
.sp
See also the online tutorials on Cobra.
.in -2
.br 
