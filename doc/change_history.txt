0.0 apr 2016
- initial, limited version
- open source license JPL

1.0 dec 2016

2.0 may 2017

2.1 jul 2017

2.2 july 2017
- bug fix: used realloc after sbrk for multiple
  preprocessing directives were used, causing crash

2.3 aug 2017
- no default setting of nr of cores
- using a preprocessing directive enables cpp

2.4 oct 2017
- added -pat and -pattern for matching simpler regex patterns
- added -expr and -regex as synonyms of -e
- added inline pat command
- added visual display of source on d commands
- made -pat/-expr pipelines work
+ disabled call to fct_defs in 'list' commands
  if the nr of tokens is greater than 500,000 (linux 10/26)

2.5 aug 2018
- bug fixes (e.g., tests for . == 0 or . != 0 came out wrong)
- allowing use of globals inside functions
- added a few cwe checkers

2.6 oct 2018
- rules/cwe library added for ten top cwe vulnerabilities
  (not yet in the distributed version)
- added window and nowindow command, new default is nowindow
  (for popping up a tcl/tk window on display commands)
- fixed: bug in command language interpreter (condition evals)

2.7 nov 2018
- fixed: bug that global arrays werent visible inside functions
- fixed: strings or quoted character now terminated at unescaped newlines
- fixed: {} imbalance on files that arent preprocessed with cpp
- added: -eol option
- added: some additional fct calls to c_api.h and c.ar (eg timing)

2.8 feb 2019
- added 'and' qualifier to contains command (and updated manpage)
- reduced cache misses in multi-core mode significantly

2.9 mar 2019
- fixed missing lock in code for "match()" in cobra_prog.y which could
  cause occassional segfaults when executing scripts in multicore mode

3.0 jun 2019
- extensions to the pattern language, allowing embedded regular
  expressions in pattern expressions
- new predefined functions that can be used in cobra scripts:
  reset(), fcts(), save(), restore(), marks()
- updated online manpages
- new library query files
- extension of command query save, to allow |,&, and ^ modifiers
- bug fixes and speedups for multi-core processing
- full source code and libraries released on github
- after initial release on github, made following updates:
  - fixed a line number bug where // style comments had a linenr
    attribute one too high
  - added C_TMP environment variable, explained in the main README.md
    relevant only to older cygwin/pc platforms where 'dot' otherwise
    can't find /tmp
  - corrected "malloc.h" -> "stdlib.h" for compilation on macs
  - made query commands 'context' and 'fcg' work correctly again
  - fixed bug with using cpp on/off interactively
  - created tagged commit for the final 3.0 version dated June 12 2019
    tag: version-3.0

3.1 nov 2019
  - correctly interpret a 'q' command when a script is read from a file
  - updated rules/play/taint.cobra
  - added checks to prevent null-ptr derefs
  - fixed reference to an out-of-scope variable, detected by coverity scan
  - fewer warnings about redefined labels when rerunning scripts
  - fixed bug with pattern searches that limited alternative choices of
    how bindings were applied
  - rewrote the encoding of associative arrays for the scripting language
    to make it considerably faster when dealing with larger arrays
  - added a -text option to suppress the categorization of tokens, which
    is especially useful when using cobra as a runtime verification tool
    on data other than program source text
  - revised how cobra reads data from stdin in no files are given. the
    data is now read in portions, so that cobra can maintain a sliding
    window on an event-stream, and check scripted queries, or pattern
    queries on a potentially infinite data stream (provided the memory
    requirements for the check remains bounded).
    by splitting the data-stream it is also possible to then check
    multiple properties in parallel.
  - many other small improvements and fixes in the query libraries, the
    main source code in src, and in the standalone checkers in src_app,
    especially in the standalone version of the cwe checkers, which are
    now all recoded to support multi-core checks
  - added online tutorials for the all existing capabilities of cobra
    verison 3.1, including the new runtime verification options.

3.2/3.3 sep 2020
  - added new find_taint backend module for finding cases of potential
    code injection in code bases.
  - reduced memory use and inproved runtime performance in processing
    streaming data, with revised token recycling.
  - added runtime and command-line options for defining the size of the
    moving event window (-stream) in applications of runtime verification.
  - added support for multi-script streaming in runtime verification.
    (earlier only a single script could be used)
  - added predefined functions for handling lists, queues, stack within Cobra scripts
  - improved accuracy of bracket-pairing across ifdef directives in C/C++ code,
    using a stack-based method for remembering settings across these directives.
  - better method for passing command-line arguments to backend modules,
    recognizing options preceded by a double dash, which are now passed to
    backend modules uninterpreted.
  - added support for the use of binary exclusive or (^), binary right-shift (>>),
    and binary left-shift (<<) operators in Cobra scripts.
  - added support for modifying additional token fields in Cobra scripts:
    specifically the fields: .round, .bracket, .curly, and .len, in addition
    to the already allowed fields .mark, .fnm, and .lnr.
  - increased the sizes of some arrays to prevent static analyzer warnings on
    potential buffer overflow.
  - added a compiler directive NO_SBRK option to support newer Mac & Linux platforms
    (preventing direct calls to the sbrk() system-routine).
  - added compiler directive DEBUG_MEM for generating diagnostic output on memory
    use during script executions.
  - additional small bug fixes.

3.4 feb 2021
  - further improvements in accuracy of brace pairing in pattern expressions (-pe)
  - new command-line options -F, -recursive, -eol, -eof
  - all warning and error messages now go to stderr instead of stdout
  - added -json and -json+ command line options primarily for output of -pe searches
  - new interactive query command dp to display selected pattern matches
  - updated manual pages
  - small bug fixes

3.4 march 5 2021
  - fixed bug in display of search results for option pe
  - fixed bug in fcts command when -m flag is used (parse macros)
  - added support of comparisons with .fct in expressions;
  - added the ability to define additional constraints, as general expressions
    on token attributes attached to states) in pattern-expression matching expressions
    (option pe) - to be documented

3.4 march 19 2021
  - changed working of command-line argument -comments to enable the inclusion
    of comments as tokens.  the full comment text is always included in the token
    (each comment forms a single token).  by default now comments are not included
    in the token stream. clearly, enabling preprocessing (-cpp) will void this option
    because the preprocessor will remove comments.
  - several other improvements and fixes in pattern expression matching
  - updated manual pages and tutoral pages with the changes

3.5 june 25 2021
  - bug fixes in pattern matching code (option -pe), especially
    when using choices in pattern expressions
  - bug fix in the input streaming mode
  - corrected implementation of the ft command (find-type)
  - new command: 'symbols' that tries to quickly link variables
    to the most likely location of their declaration
    with manpage (http://spinroot.com/cobra/commands/symbols.html)
  - modified working of reset command, to preserve link
    information set in the new symbols command
  - added token category @const as a shorthand for:
    @const_int, @const_hex, @const_oct, const_flt
    which are still supported
  - small fix in the find_taint command (better precision
    in reporting suspicious uses of gets())
  - extension of pattern expressions to allow positional
    parameters and the application of general constraints
    at different points in an expression

-- august 6 2021
  - new version of src_app/find_taint that now reads a
    user-definable configuration file -- added a manual
    page for this new backend tool as well.
    the new version is faster (though that wasn't the
    objective) and reports more things; it also has more
    easily understandable code (the main objective)

3.6 september 10 2021
  - added pattern sets: with the -pe (or -pat) command
    you can now specify a named set to save the matching
    patterns in.  you can display individual matches by
    using the set name in the 'dp' command, and you can
    perform set operations, or create, delte, or convert
    a pattern set into basic markings with the new 'ps'
    (short for 'pattern set') command.
    added manual pages and explanations for the changes.

3.7 december 10, 2021
  - added support for named pattern sets in the scripting
    language (routines: pset(), add_pattern(), del_pattern() )
  - fixed a bug in the working of the contains & command
    which now correctly matches what the manual page says
  - add 5 routines to the c_api.h API header file, with
    matching support from the front-end.  backend-checkers
    can now use routines
	add_pattern(set_name, from_token, upto_token)
	del_pattern(set_name, from_token, upto_token)
	json(msg)
	  // to emit marked tokens in json format
	json_convert(set_name)
	  // to convert the matched
	  // patterns from a set into
	  // markings, where json() can see them
	json_match(msg, detail, file, linenr)
	  // to generate a json-formatted output msg
   - extended the backend tool src_app/find_taint*
     to support two new options: --json and --json+
     which cause output to be produced in JSON format
     in terse (--json) or more verbose (--json+) form.
   - the backend tool cwe will be modified as well
     in a future update

new in december 30, 2021
   - updated the interface between cobra and backend checkers
     (like cwe and find_taint) to support json output format
   - cwe and find_taint were updated to recognize new commandline
     options --json and --json+ to generate output in
     json format
   - improved argument handling for both cwe and find_taint

3.8 february 7, 2022
   - added support to front-end and back-ends (cwe etc)
     to output JSON formatted files that the Cobra-front
     can read back in to seed pattern sets based on
     the results of the earlier run.
     the feature uses a field named "cobra" in the JSON
     output that gives exact token locations, but JSON
     files without this field can also be read.
     the inline command to read a JSON file is:
	: seed filename
     and the matching command-line option is:
	$ cobra -seed filename *.c
     preprocessing (-cpp) should be enabled or disabled
     the same when the JSON format is generated and when
     it is read. and the files referenced must be available.
     once the token markings are seeded, the newly created
     pattern set(s) can be manipulated in the
     usual ways with other query commands (e.g. pset).

   - added a prototype for json_convert.c to convert
     Cobra generated JSON ouput into alternate formats
     (JUnit and SARIF).
     The accuracy of the conversions needs review.

   - added an option to the 'ps' inline query command to
     generate JSON output directly from a pattern-set
     (without having to convert it first into basic markings):
	: ps json setname
     the output can be redirected into file in the usual way:
	: track start file
	: ps json setname
	: track stop
	:!wc file
     the older method to generate the same JSON output
     is to first convert the set into basic markings, eg:
	: reset
	: ps convert setname
	: json msg

   - added a configuration file option on startup.  if a file
     named .cobra is found in the current directory, it is
     executed on startup as a regular command file.
     the effect is similar as if the first query command
     executed in the session was ". .cobra" or command-line
     options start with the same: $ cobra -c ". .cobra; ..." *.c

   - added the missing "verbose" query command, which sets
     verbose mode that some rule libraries use

   - made it possible to refer to token field names (e.g., .curly)
     within pattern constraints using bound variables -- to be
     documented in the relevant manual pages.

   - added a new -global command-line flag to allow pattern
     matches to cross file boundaries (off by default, and it
     can make searches much slower, especially when using .*)

   - improves several rules, and added some more misra rule checkers
     (misra1997, rules 12, 21, 25, and 42).

3.9 march 16, 2022
   - significant rewrite of the main query libraries to make use of
     named pattern sets (basic, misra, p10, cwe, etc.)
   - bug fix in cobra_eval.y (expressions parsing), which was missing
     support for the .fct token attribute since version 3.8
   - added support for referring to bound variables in
     pattern expression constraints, eg for token comparisons
     works in constraints for == or != of token texts or other attributes
   - updated src_app/scope_check.c to support -json output format
     (which is now also used in some query libraries to first 
     generated the output and then read it into the main cobra
     tool with a 'seed' command)
   - added a small java/check query library, to be extended
   - updated src_app/c_api.h
   - revised the ps list command to list patterns in order created, rather
     than in reversed order
   - added a 'requires version' command to secure that the right version
     of cobra is used with some of the updated query libraries
   - added a 'scripts' command to list which inline scripts are defined
   - added a 'help' option to commands ps, pe, and dp (eg : ps help)
   - added a 'caption' option to the ps command to give a more
     descriptive explanatory caption to a pattern set
     (eg : ps caption Name Message ....)
   - added a 'rename' option to command ps (eg : ps rename Old New)
   - added -DALPINE support option to fix an issue with commandline use
     reported for this version of linux
   - added a cobra_stub.c file to simplify decoupling of front and backend code
   - changed the default setting of EOF tokens to on -- command-line option
     -eof now turns it off (which should rarely be needed)
   - increased size of bvars and json_msg buffers from 512 to 1024
     characters (for json format outpur to report bound variables
     or an error description)
   - fixed an issue reported by static analysis on potential buffer
     overflow, by more explicitly indicating buffer sizes (check_bvar)
   - improved reporting of bound variable matches
   - similarly, fixed a buffer size issue in check_args()
   - other small updates and fixes

3.9 april 11, 2022
   - intermediate update to fix assertion error, and to add
     preliminary support for a new gui for cobra (icobra) that
     is in development
   - this version also supports defining file-specific compiler
     directives when a file-list is provided with the -F argument
     the new tool xmake (in the bin_... directories) extracts
     the right format from a makefile -- new manpages added
   - other minor fixes

4.0 june 8, 2022
   - an update to support a new graphical interface (not yet
     part of the distribution) -- improved support for C++14,
     revisions of query libraries, and some bug fixes
   - extension of constraint syntax in pattern expressions to
     support a broader range of comparisons of token attributes
   - separates the token stream into two parts now by default:
     one stream with just comments and the other with just the
     actual source code -- this simplifies writing patterns to
     match on the code, because without this comments could
     appear anywhere in the code and would need to be handled.
     two new related query commands: 'comments' and 'source' to
     switch between the two streams.  every comment token is
     linked to its original successor in the main token stream
     through its .bound field.   -- the original -comments
     command-line argument is now deprecated as no longer needed.
   - added constant type @const_bin (also part of @const)
   - more consistent behavior of the pe pattern matching algorithm

4.1 july 21, 2022
   - final update supporting the new iCobra.tcl GUI, which is
     now also part of the distribution (gui/icobra.tcl and in
     the bin_*/ directories as icobra).
   - added spinroot.com/cobra/icobra.html manual page
   - new checkers in the rules directories support features in
     icobra (e.g., the metrics panel)
   - icobra requires version 4.1, and checks for this on startup
   - added several new commands: including six new set operations
     inspired by Allen interval algebra (pattern matches can be
     thought of as intervals of tokens) -- see the ps.html manpage
     for the deetails
   - added an option "dp filter filenam" and "dp filter off" to
     enable or disable a restriction of the output of a dp command
     (specifically "dp *") to a single named file.

4.3 december, 2022
   - improvement in memory efficiency when deleting/recreating
     associative arrays in the scripting language
   - added support for suppressing possible matches in named
     pattern sets for lines marked with a comment // @suppress SetName
     as described in the manpage for the dp query command
   - do not add a backslah in front of a colon in json output (gitbub
     issue PR #48)
   - improvements in json formatted output to comply with standard
   - updated help menus, and small bug fixes

4.4 april 7, 2023
  - new command-line option to limit the maximum amount of memory that a
    Cobra run can consume, -MaxMem 4000 (for a 4GB limit, the
    default maximum is set to 24GB, equivalent to -MaxMem 24000)
  - new command-line option -prune to remove code between #if 0 and #endif
    preprocessing directives, even if no preprocessing is used.
  - added -Wformat-truncation=1 to the makefile for cygwin and linux
    compiles to prevent incorrect reports from gcc on compilation.
  - new predefined function for the scripting language to split
    a string into parts, using a comma as the field delimiter
    (as used for the index in associative arrays with multiple fields)
    eg: n = split(i.txt, A), which returns the parts as elements
    of a new array A (A[0], A[1], etc.) and returns the number of
    elements found.
  - fixed bug in cfg query command where repeated calls could
    report incorrect edge and node numbers
  - fixed bug in the extends query command binding the current
    symbol to $$ correctly
  - avoid reprinting long query command lines when text wraps
    (unless backspace or word-erase characters are used)
  - improved efficiency for handling array indices that are
    small numbers (0..9), which are common
  - when working with named pattern-sets in inline programs,
    added a notation to access any bound variables in matches,
    both the point of definition (x.p_bdef) and the point
    of reference (x.p_bref), as described under predefined
    functions in the documentation (programs/functions_predefined.html)
  - fixed bug to prevent runon matches for pattern expressions,
    if multiple matches of the pattern follow each other directly
  - added new command refmod (see manpage doc/refmod.1) and a
    new directory in the rules directory with associated sub-commands
    and data-sets
  - added new script play/tokenize.cobra to tokenize a given
    code fragment so that it is suitable to use in a pattern
    expression (e.g.: cobra -f play/tokenize code_fragment.c )

4.5 august 13, 2023
 - added built-in functions for inline programs: src_ln, hash, hasharray
 - efficiency improvements (reducing memory use) of string handling in inline progs
 - added new checker libraries for the JPl/Semmle Java coding guidelines
 - added checkers for CERT Java rules, criticality Level 1
 - added checker for locating duplicate code (main/duplicates.cobra)
 - fixed bug that disallowed script names (def..end) starting with F, G, or B
 - fixed bug in performing set operations on pattern sets with bound variables
 - fixed bug in accuracy of linecounting in cobra_lex.c
 - fixed bug in command-line defined parameter handling in inline functions
 - fixed bug in the handling of pattern set names in pattern queries

4.6 january 21, 2024
 - small fixes

4.7 may 5, 2024
 - added -html commandline flag to recognize and pair html tags
 - added rules/html with some checkers
 - added -python to parse python code with indentation semantics
 - added rules/python with some checkers
 - added -showprog to show a dot graph of the first inline program defined
 - improved output for the pre (p) display command, improved use of ^ characters
 - added 'foreach' statement for inline programs
   allowing: foreach (x in Patternset)
             { foreach (t in x)
               { ... }
             }
 - other small updates and bug fixes

4.8 October 21, 2024
 - removed reliance on the bin_linux/bin_mac/bin_cygwin directories
   and instead install tools in /usr/local/bin -- two platform
   independent tools (icobra, x_make) are now in
   a new subdirectory bin_tools
 - simplified the makefile with a new install option
 - added a new standalone program 'duplicates,' linked to the Cobra
   front-end, to find duplicate fragments of code, and possible patch
   sequences. manual page added in the doc directory.
 - added new keyword 'pattern' as an optional qualifier for the
   'foreach' statement, in cases where the type of the target cannot be
   determined at compile time, for instance because it is given as
   a parameter to a function call. writing 'foreach pattern (i in S) { .. }'
   removes the ambiguity. the default in cases like these (when the
   qualifier is not used and the type of the target cannot be determined)
   is still to assume a token sequence.
 - added a new builtin function 'list2set' to convert a list of matches
   extracted with a 'pset' command back into a named pattern set.
 - added the keyword 'elif' as an abbreviation of 'else if' and adjusted
   the grammar to not require the { after the else if it is followed by
   another if statement (note: not correctly implemented in 4.8, fixed in 5.0)
 - added an optional constraint clause to the 'pset' builtin function for
   inline programs. there are two forms:
     pset(Set) with (expr)
   to extract only those matches for which the expression evaluates to true
   on the first token of a match (e.g., .fnm == "thisfile.c" && .lnr > 100).
   the second form is:
     pset(Set) with "string"
   to extracts only matches that contain the text "string" in at least one
   of the tokens from the match
   for instance
     pset(Set) with "for"
   for matches containing at least one for-statement, or
     pset(Set) with "j"
   for matches containing at least one reference to the variable j.
 - added the same constraint options also to the ps command, to define
   subset slices of a given set, as in:
     : ps B = A with (expr)
     : ps C = A with "string"

 - removed invalid warnings for unmatched round braces in the re command
 - fixed the default command, which was no longer working correctly
 - added a qualifier option ir to the stretch command, to limit the
   forward search for a match to the current function (.curly>0)
 - fixed a bug in passing parameters to a def/end script when the
   actual parameter is longer than the formal parameter text
 - pre command didn't always underline correctly
 - extended language to allow dot-chain references like p.jmp.jmp.seq
 - preventing nested fct definition (grammar allowed it, though this
   wasn't intended)
 - preventing gotos into and out of functions (the grammar unintentionally
   allowed it before)
 - supporting foreach [pattern token index] (i in X) { ... }
   making 'for (i in X)' a shorthand for 'foreach index (i in X)'

5.0 March 17, 2025
 - in this new version there is greater support for using the cobra
   inline programming language for writing general parallel programs
   by adding the -solo commandline argument and extensions to the
   language itself (with a larger set of standard builtin functions)

 - added alternative name for the dot ('.') command as 'import'
   the dot command itself will continue working for backward compatibility

 - a_unify can now take an expression to specify the acting cpu:
   a_unify(nm, expr) or a_unify(expr)

 - a_unify unification now updates the values on all cpus, not just on the
   calling cpu (note a_unify should not be called more than once,
   also not by different cpus)

 - added command-line option -solo to run cobra without inputs
   (for instance just to run a cobra inline program standalone)
   it provides one dummy token per core to allow scripts to run

 - added new builtin functions to inline programming language to facilitate
   writing standalone scripts in -solo mode:
	atoi (type conversion from string to integer)
	open, gets, puts, close, unlink (file handling)
	exec (system function)
	gsub, strchr, strrchr, strcmp (string functions)
	src_nm (numbered version of src_ln)
   the additions are documented in the online manual pages

 - corrected the implementation of the new elif keyword

 - corrected the working of break statements in nested while loops

 - corrected the detection of incorrect parameter counts in function calls

 - corrected implementation of print function to ignore \n and \t escape
   sequences that appear inside strings

 - regular expression matching in multicore mode is now done under lock

 - print and puts inline calls are now executed under lock

 - renamed the optional default autorun script ./.cobra to ./.cobra_run
   to prevent confusion with the main configuration file ~/.cobra,
   the option is now only enabled when the sources are compiled with -DAUTORUN
   (the reason for de-emphasizing this option is that it is generally much
   simpler to call cobra with the desired script, using the -f option)

 - in -text mode cobra now preserve the EOF marker at the end of each file.
   it can be suppressed with -eof

 - fixed a silent problem in multicore mode that could have lead to
   seemingly inexplicable failures

 - general code cleanup and improved error reporting somewhat

5.1 June 19, 2025

 - the features supported in this version are assumed in the
   new book that will appear later this year

 - the main website with manuals and tutorials is now https://codescrub.com/
   (changed from https://spinroot.com/cobra)

 - updated the license text to clarify that it applies without change to all
   releases since the initial Version 1.

 - changed the internal representation of values used in inline
   programs to floating point. this can be disabled by recompiling the
   Cobra sources with directive -DNOFLOAT

 - values are printed with the print function with 2 decimal places by default,
   unless the value has no decimal fraction, in which case it is printed as an integer.

 - added optional format strings for print and puts commands to allow different
   formats for floating point and integer values
   (inline programming language), for example:
    print "sample %d more text %4.2f string %s" x y z
   example added to rules/version5/copy.cobra
   the only conversion characters recognized are %s, %d, and %f with optional
   numeric specifiers embedded, as in the example above

 - pattern sets that are not explicitly named in the pattern expression
   are now assigned a default name, so that all patterns sets are named

 - added a new binary operator for inline programs ** for exponentiation

 - added a command-line option -noecho to suppress the printing of typed
   characters -- this is useful when you run cobra in a script, using
   a 'here document' for the input

 - src_app/cwe_util.c was renamed into src_app/c_util.c since it's used
   in multiple backend programs, not just cwe

 - added new examples in the rules/version5 directly to illustrate
   concepts supported in version 5.1 (and used in the new book)

 - added toint(), tofloat(), and tostr() as predefined functions

 - small update to icobra.tck to prevent the filelist from being edited
   accidentily

 - small updates to the makefile

 - now allows two spellings: -Python and -python for different language modes
   including -Java and -java, -Ada and -ada, -C++ and -c++, and -HTML and -html

 - bug fix in implementation of inline function gsbub

 - code cleanup, and other small bug fixes, eg for handling escape characters in strings

 - small update to src_app/abstract.c to suppress printing EOL tokens

5.2 August 28, 2025

 - extended code to allow all bound variables to be accessed in inline programs
   for patterns matched starting at the first one in the x.p_bref reference
   variable by following the .bound refs: x.p_bref.bound, x.p_bref.bound.bound etc.

 - faster execution of 'fcts' command for large code archives (using hashtable lookups)

 - fixed bug in 'fcts' command that prevented a complete set of functions from being marked

 - fixed bug in 'contains' command when used with an & (and) qualifier

 - improved ndfa generating for pattern expressions, improved results reporting
